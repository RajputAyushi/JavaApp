pipeline {
    agent any
    tools {
        maven 'mymvn'
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Checkout successful"
            }
        }
        
        stage('Build') {
            steps { 
                echo "Build started"
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
                echo "Build successful"
            }
        }
        
        stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://10.0.2.15:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonartoken', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "ayushiraj/dockerrepo:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('Dockertokenforjenkins')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "Dockertokenforjenkins") {
                dockerImage.push()
            }
        }

}                
 }
